#!/usr/bin/ruby

class SubDlTrigger
  attr_accessor :id
  attr_accessor :name
  attr_accessor :saveFolder
  attr_accessor :fullName
  attr_accessor :files
  attr_accessor :cmd
  attr_accessor :downloader
  attr_accessor :downloaders
  attr_accessor :debug
  attr_accessor :programNamae

  def initialize(arguments)
    @debug = true
    @programName = File.basename(__FILE__) 
    @id = arguments[0]
    @name = arguments[1]
    @saveFolder = arguments[2]
    @fullName = File.expand_path("#{@saveFolder}/#{@name}")
    @extensions = ['.mkv','.mpeg','.mpg','.avi','.mp4']
    @downloaders = ["periscope","subliminal"] 
                                 ## At the moment, only periscope support since
                                 ## subliminal doesn't have the ability to
                                 ## store search parameters into a file
    @files = Array.new
    @downloader = nil
    locateDownloader
  end

  def locateDownloader
    ENV['PATH'].split(":").each { |path|
      @downloaders.each { |tool|
        tmpTool = File.expand_path("#{path}/#{tool}")
        if File.file?(tmpTool) then
          @downloader =  tmpTool
          break
        end
        if @downloader != nil then
          break
        end
      }
    }

    if @downloader == nil then
      puts "#{@programName}:: cannot locate appropriate sub downloader tool" if @debug 
      exit 1
    end

    puts "#{@programName}:: using #{@downloader} to scan for new subtitles" if @debug 
  end

 def shellescape(str)
    puts "Shell Escape"
    return "''" if str.empty?
    str = str.dup
    str.gsub!(/([^A-Za-z0-9_\-.,:\/@\n])/n, "\\\\\\1")
    str.gsub!(/\n/, "'\n'")
    return str
  end

  def download(fileName)
    cmd = "#{@downloader} '#{fileName}'"
    puts "#{@programName}:: executing \"#{cmd}\""  if @debug
    %x[#{cmd}>>/dev/null 2>&1]
    puts "#{@programName}:: downloader #{@downloader} exited with non-standard exit code #{$?.exitstatus}" if @debug  and $?.exitstatus != 0
    puts "#{@programName}:: subtitles downloaded!" if @debug  and $?.exitstatus == 0
  end

  def isVideoFile(name)
    puts "isVideoFile"
    @extensions.include?(File.extname(name).downcase)
  end

  def run
    if File.directory?(@fullName) then
      Dir.glob("#{shellescape(@fullName)}/**",0).each { |entry|
        if isVideoFile(entry) then
          @files << entry
          puts "#{@programName}:: adding \"#{entry}\" to subtitle queue." if @debug
        end
      }
    else
      if File.exists?(@fullName) and isVideoFile(@fullName) then
        @files << shellescape(@fullName) 
        puts "#{@programName}:: adding \"#{@fullName}\" to subtitle queue." if @debug
      end
    end
    puts "#{@programName}:: no videofiles found during this scan." if @debug and @files.length == 0

    @files.each{ |entry|
      download(entry)
    }
  end

end

if ARGV.length == 3 then
  dl = SubDlTrigger.new(ARGV)
  dl.run
else
  puts "meep!" if @debug 
end

